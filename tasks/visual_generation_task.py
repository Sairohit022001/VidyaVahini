from tasks.base import BaseTask  # Assuming BaseTask is in tasks.base
from pydantic import BaseModel, Field
from typing import List
from tools.visual_generation_tool import VisualGenerationTool # Assuming the tool is needed here

class VisualOutputSchema(BaseModel):
    topic: str = Field(..., description="Topic name or concept title")
    visual_prompts: List[str] = Field(..., description="List of DALL·E or Gemini prompts for generating visual scenes")
    grade_level: str = Field(..., description="Class/Grade level to adapt visual style")
    dialect_style: str = Field(..., description="Tone/dialect for cultural style (e.g., Telangana Telugu)")
    image_styles: List[str] = Field(..., description="Style hints like cartoon, diagram, sketch")


class VisualGenerationTask(BaseTask): # Inherit from BaseTask
    name = "Generate Visual Concepts"
    description = (
        """Given a topic summary, story, or keywords, generate 3–5 visual prompts.
Adapt prompts to grade level (e.g., cartoon for class 3, diagram for class 9).
Visuals must be culturally relevant and support local dialect or context.
Include image style hints like cartoon, sketch, realistic, etc.
Support usage in Gemini Vision or DALL·E.
Prompts must be safe, bias-free, and aligned with academic context.
Outputs must follow the VisualOutputSchema in JSON.
This task can be triggered after StoryTellerAgent, or manually by teachers.
Optionally, include narration cues or audiovisual ideas if needed."""
    )
    expected_output = VisualOutputSchema
    output_json = True
    context_injection = True
    verbose = True
    output_file = "outputs/visual_output_{timestamp}.json"
    guardrails={
        "retry_on_fail": 2,
        "fallback_response": {
            "topic": "Unknown Topic",
            "visual_prompts": [],
            "grade_level": "Unknown",
            "dialect_style": "Telangana Telugu",
            "image_styles": ["cartoon"]
        }
    }
    metadata={
        "agent": "VisualAgent",
        "access": "teacher_and_student_above_grade_10",
        "downstream": ["BhāṣāGuru"],
        "triggers": ["on_story_completion", "on_teacher_request"],
        "tool_required": True
    }

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.visual_tool = VisualGenerationTool() # Instantiate the tool


    async def run(self, inputs: dict): # Define async run method
        """
        Asynchronously runs the visual generation task using the VisualGenerationTool.

        Args:
            inputs (dict): Should contain necessary data like topic, grade, dialect, etc.

        Returns:
            dict: Dictionary conforming to VisualOutputSchema, generated by the tool.
        """
        try:
            # Call the run method of the VisualGenerationTool instance
            # Note: The tool's run method is currently synchronous, so no await needed here
            result = self.visual_tool.run(inputs)
            return result
        except Exception as e:
            # Return fallback response on error
            return self.guardrails.get("fallback_response", {
                "topic": inputs.get("topic", "Unknown Topic"),
                "visual_prompts": [],
                "grade_level": inputs.get("grade_level", "Unknown"),
                "dialect_style": inputs.get("dialect", "Telangana Telugu"),
                "image_styles": ["cartoon"]
            })


# Instantiate the task
visual_generation_task = VisualGenerationTask(name=VisualGenerationTask.name, description=VisualGenerationTask.description) # Instantiate the class
