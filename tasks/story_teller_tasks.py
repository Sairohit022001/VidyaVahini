from tasks.base import BaseTask  # Assuming BaseTask is in tasks.base
from pydantic import BaseModel, Field
from typing import List
from tools.story_generation_tool import StoryGenerationTool # Import the tool

class StoryOutputSchema(BaseModel):
    title: str = Field(..., description="Engaging title of the story")
    story_body: str = Field(..., description="Full story in 150–300 words using cultural relevance")
    moral: str = Field(..., description="Educational takeaway from the story")
    suggested_visuals: List[str] = Field(..., description="Scene-level prompts for visual generation")
    dialect: str = Field(..., description="Dialect used (e.g., Telangana Telugu)")

class StoryTellerTask(BaseTask): # Inherit from BaseTask
    name = "Generate Contextual Academic Story"
    description = (
        """Receive topic, grade level, and dialect.
Create a story that illustrates the topic with relatable characters.
Adapt tone based on student age (funny for kids, abstract for older students).
Include a short moral linked to the lesson theme.
Add suggested visuals for VisualAgent.
Maintain cultural grounding and classroom appropriateness.
Avoid plagiarism and AI hallucination.
Embed emotion, curiosity, and humor for engagement.
Return JSON as per StoryOutputSchema.
Use dialect requested for BhāṣāGuru narration compatibility."""
    )
    expected_output = StoryOutputSchema
    output_json = True
    context_injection = True
    verbose = True
    output_file = "outputs/story_output_{timestamp}.json"
    guardrails={
        "retry_on_fail": 1,
        "fallback_response": {
            "title": "Default Story Title",
            "story_body": "No story generated.",
            "moral": "Learning is fun!",
            "suggested_visuals": [],
            "dialect": "Telangana Telugu"
        }
    }
    metadata={
        "agent": "StoryTellerAgent",
        "access": "teacher_only",
        "downstream": ["VisualAgent", "BhāṣāGuru"],
        "triggers": ["on_story_request"]
    }

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.story_tool = StoryGenerationTool() # Instantiate the tool


    async def run(self, inputs: dict): # Define async run method
        """
        Asynchronously runs the story teller task using the StoryGenerationTool.

        Args:
            inputs (dict): Should contain necessary data like topic, grade, dialect, lesson_plan_json.

        Returns:
            dict: Dictionary conforming to StoryOutputSchema, generated by the tool.
        """
        try:
            # Call the run method of the StoryGenerationTool instance
            # Note: The tool's run method is currently synchronous, so no await needed here
            result = self.story_tool.run(inputs)
            return result
        except Exception as e:
            # Return fallback response on error
            return self.guardrails.get("fallback_response", {
                "title": "Error generating story",
                "story_body": f"An error occurred: {str(e)}",
                "moral": "Keep trying!",
                "suggested_visuals": [],
                "dialect": inputs.get("dialect", "Telangana Telugu")
            })


# Instantiate the task
story_teller_task = StoryTellerTask(name=StoryTellerTask.name, description=StoryTellerTask.description) # Instantiate the class
